name: 'HTTPRunner Action'
description: 'GitHub Action for running .http files using httprunner CLI tool'
author: 'Christian Helle'
branding:
  icon: 'play'
  color: 'blue'

inputs:
  discover:
    description: 'Enable discovery mode to recursively scan for .http files in the current directory'
    required: false
    default: 'false'
  files:
    description: 'One or more .http files to execute (space-separated)'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        if [[ "${{ inputs.discover }}" == "true" && -n "${{ inputs.files }}" ]]; then
          echo "Error: Cannot use both discovery mode and specific files. Please choose one option."
          exit 1
        fi
        
        if [[ "${{ inputs.discover }}" != "true" && -z "${{ inputs.files }}" ]]; then
          echo "Error: Must specify either discovery mode (discover: true) or provide specific files."
          exit 1
        fi

    - name: Install httprunner on Linux
      if: runner.os == 'Linux'
      shell: bash
      run: |
        echo "Installing httprunner on Linux using snap..."
        sudo snap install httprunner
        echo "✓ httprunner installed successfully on Linux"

    - name: Install httprunner on macOS
      if: runner.os == 'macOS'
      shell: bash
      run: |
        echo "Installing httprunner on macOS..."
        
        # Detect architecture
        ARCH=$(uname -m)
        if [[ "$ARCH" == "arm64" ]]; then
          FILENAME="httprunner-macos-aarch64.tar.gz"
        else
          FILENAME="httprunner-macos-x86_64.tar.gz"
        fi
        
        echo "Detected architecture: $ARCH, downloading $FILENAME"
        
        # Get latest release URL
        LATEST_RELEASE_URL=$(curl -s https://api.github.com/repos/christianhelle/httprunner/releases/latest | grep "browser_download_url.*$FILENAME" | cut -d '"' -f 4)
        
        if [[ -z "$LATEST_RELEASE_URL" ]]; then
          echo "Error: Could not find download URL for $FILENAME"
          exit 1
        fi
        
        echo "Downloading from: $LATEST_RELEASE_URL"
        curl -L -o "/tmp/$FILENAME" "$LATEST_RELEASE_URL"
        
        # Extract and install
        cd /tmp
        tar -xzf "$FILENAME"
        chmod +x httprunner
        sudo mv httprunner /usr/local/bin/
        echo "✓ httprunner installed successfully on macOS"

    - name: Install httprunner on Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "Installing httprunner on Windows..."
        
        $FILENAME = "httprunner-windows-x86_64.zip"
        Write-Host "Downloading $FILENAME"
        
        # Get latest release URL
        $release = Invoke-RestMethod -Uri "https://api.github.com/repos/christianhelle/httprunner/releases/latest"
        $downloadUrl = $release.assets | Where-Object { $_.name -eq $FILENAME } | Select-Object -ExpandProperty browser_download_url
        
        if (-not $downloadUrl) {
          Write-Error "Could not find download URL for $FILENAME"
          exit 1
        }
        
        Write-Host "Downloading from: $downloadUrl"
        Invoke-WebRequest -Uri $downloadUrl -OutFile "$env:TEMP\$FILENAME"
        
        # Extract and install
        Expand-Archive -Path "$env:TEMP\$FILENAME" -DestinationPath "$env:TEMP\httprunner-extract" -Force
        $httprunnerPath = Get-ChildItem -Path "$env:TEMP\httprunner-extract" -Name "httprunner.exe" -Recurse | Select-Object -First 1
        
        if (-not $httprunnerPath) {
          Write-Error "Could not find httprunner.exe in extracted files"
          exit 1
        }
        
        $fullPath = Join-Path "$env:TEMP\httprunner-extract" $httprunnerPath
        Copy-Item $fullPath "$env:GITHUB_WORKSPACE\httprunner.exe"
        
        # Add to PATH for this session
        $env:PATH = "$env:GITHUB_WORKSPACE;$env:PATH"
        Write-Host "✓ httprunner installed successfully on Windows"

    - name: Verify httprunner installation
      shell: bash
      run: |
        echo "Verifying httprunner installation..."
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          ./httprunner.exe --version || httprunner --version
        else
          httprunner --version
        fi

    - name: Run httprunner
      shell: bash
      run: |
        echo "Running httprunner..."
        
        if [[ "${{ inputs.discover }}" == "true" ]]; then
          echo "Running in discovery mode..."
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            ./httprunner.exe --discover
          else
            httprunner --discover
          fi
        else
          echo "Running with specified files: ${{ inputs.files }}"
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            ./httprunner.exe ${{ inputs.files }}
          else
            httprunner ${{ inputs.files }}
          fi
        fi